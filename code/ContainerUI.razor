@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@inherits PanelComponent

<root style=@($"justify-content: {Position};"))>
	<div class = "centered" style=@($" width: {Width}%;" + (EnableMouse ? " pointer-events: all;" : ""))>
		<div>
			<div onclick=@(() => ChangeType(-1))>⮜</div>
			<div style="width: 10%; justify-content: center;"><div>@(CustomFunctions.CapitalizeWords(CurrentType.ToString()))</div></div>
			<div onclick=@(() => ChangeType(1))>⮞</div>
		</div>
		<table style=@("flex-direction: column;" + $" width: {TableSize}%; height: {TableSize}%;")>
			<th>
				@for(int i = 0; i < Its.SortTypes.Count; i++)
				{ 
					int capture = i;
					<td onclick=@(() => SetSortingIndex(capture))>@($"{Its.SortTypes[i]}{(SortIndex == i ? (SortDirection ? "⮝" : "⮟") : "" )}")</td>
				}
			</th>
			@for(int i = 0; i < OrderedList.Count; i++)
			{
				int capture = OrderedList[i].id;
				<tr style=@((i+1)%2 == 0 ? "background: #0002" : "background: #0000") onclick=@(() => SelectItem(capture))>
					@foreach(string s in OrderedList[i].stats)
					{
						<td>@s</td>
					}
				</tr>
			}
		</table>
	</div>
</root>

@code
{

	[Property] public Entity Entity {get;set;}

	public enum sortType
	{
		Name,
		Weight,
		Value,
		DPS,
		Damage
	}

	public float GetNameValue(SaveClasses.EntitySave entity)
	{
		char[] characters = entity.Categories[entity.Categories.Count-1].ToCharArray();
		string add = "";
		
		for(int i = 0; i < 4; i++)
		{
			if(i < characters.Length)
			{
				add += $"{10+(char.ToUpper(characters[i]))}";
			}
			else
			{
				add += "00";
			}
		}
        return 100000000-float.Parse(add);
	} 

	public void SetSortingIndex(int index)
	{
		if(SortIndex == index) SortDirection = !SortDirection;
		else SortIndex = index;
		CalculateList();
	}

	public void SelectItem(int id)
	{
		MoveID = id;
	}

	public void ChangeType(int direction)
	{
		if (Enum.IsDefined(typeof(Types), (int)CurrentType + direction))
		{
			CurrentType = (Types)((int)CurrentType + direction);
		}
		else
		{
			CurrentType = direction == 1 ? (Types)0 : (Types)(Enum.GetValues(typeof(Types)).Length-1);
		}
		SortIndex = 0;
		CalculateList();
		
	}

	public float GetWeightValue(SaveClasses.EntitySave entity)
	{
		item item = CustomFunctions.GetResource<item>(entity.Categories, "item");
		return item.Weight;
	}

	public float GetValueValue(SaveClasses.EntitySave entity)
	{
		item item = CustomFunctions.GetResource<item>(entity.Categories, "item");
		return item.Value;
	}

	public float GetDPSValue(SaveClasses.EntitySave entity)
	{
		Weapon weapon = CustomFunctions.GetResource<Weapon>(entity.Categories, "weapon");
		float DPS = (1/weapon.shootTime)*weapon.bulletStats[0].damage*weapon.bulletStats[0].shotsPer;
		return DPS;
	}

	public float GetDamageValue(SaveClasses.EntitySave entity)
	{
		Weapon weapon = CustomFunctions.GetResource<Weapon>(entity.Categories, "weapon");
		return weapon.bulletStats[0].damage * weapon.bulletStats[0].shotsPer;
	}

	public enum Types
	{
		items,
		weapons,
		apparel,
		misc
	}

	[Property] private List<sortedItem> OrderedList {get;set;}
	[Property] public Types CurrentType {get;set;} 
	[Property] public int SortIndex {get;set;}
	[Property] public bool SortDirection {get;set;}
	[Property] public ItemTypeSort Its {get;set;}
	[Property] public bool EnableMouse {get;set;}
	[Property] public string Position {get;set;}
	[Property] public float Width {get;set;} = 100f;
	[Property] public float TableSize {get;set;} = 100f;
	[Property] public int MoveID {get;set;} = -1;

	public void CalculateList()
	{
		List<float> floatValues = new List<float>();
		List<sortedItem> newContainier = new List<sortedItem>();
			
		for(int i = 0; i < Entity.Container.Count; i++)
		{
			if(Entity.Container[i].Categories.Contains(CurrentType.ToString()))
			{
				Its = ResourceLibrary.Get<ItemTypeSort>($"gameresources/itemtypesorts/{CurrentType.ToString()}.typesort");
				
				
				sortedItem sortedItem = new sortedItem();
				sortedItem.id = Entity.Container[i].id;
				sortedItem.stats = new List<string>();
				
				foreach(sortType s in Its.SortTypes)
				{
					
					switch(s)
					{
						case sortType.Name:
							sortedItem.stats.Add(CustomFunctions.CapitalizeWords(Entity.Container[i].Categories[Entity.Container[i].Categories.Count-1]));
							break;
						case sortType.Weight:
							sortedItem.stats.Add((MathF.Round(GetWeightValue(Entity.Container[i]) * 10)/10).ToString());
							break;
						case sortType.Value:
							sortedItem.stats.Add(MathF.Round(GetValueValue(Entity.Container[i])).ToString());
							break;
						case sortType.DPS:
							sortedItem.stats.Add(MathF.Round(GetDPSValue(Entity.Container[i])).ToString());
							break;
						case sortType.Damage:
							Weapon weapon = CustomFunctions.GetResource<Weapon>(Entity.Container[i].Categories, "weapon");
							string spreadMultiplier = weapon.bulletStats[0].shotsPer > 1 ? $"{weapon.bulletStats[0].shotsPer}x" : "";
							sortedItem.stats.Add($"{spreadMultiplier}{weapon.bulletStats[0].damage}");
							break;
					}
				}
				
				newContainier.Add(sortedItem);

				switch(Its.SortTypes[SortIndex])
				{
					case sortType.Name:
						floatValues.Add(GetNameValue(Entity.Container[i]));
						break;
					case sortType.Weight:
						floatValues.Add(GetWeightValue(Entity.Container[i]));
						break;
					case sortType.Value:
						floatValues.Add(GetValueValue(Entity.Container[i]));
						break;
					case sortType.DPS:
						floatValues.Add(GetDPSValue(Entity.Container[i]));
						break;
					case sortType.Damage:
						floatValues.Add(GetDamageValue(Entity.Container[i]));
						break;
				}
				
			}
			
		}
		

		if(!SortDirection)
		{
			var combined = newContainier.Zip(floatValues, (obj, val) => new { Object = obj, Value = val })
                              .OrderByDescending(item => item.Value)
                              .ToList();
			OrderedList = combined.Select(item => item.Object).ToList();
		}
		else
		{
			var combined = newContainier.Zip(floatValues, (obj, val) => new { Object = obj, Value = val })
                              .OrderBy(item => item.Value)
                              .ToList();
			OrderedList = combined.Select(item => item.Object).ToList();
		}


        
		
	}

	public class sortedItem
	{
		public int id {get;set;}

		public List<string> stats {get;set;}
	}
	
	protected override void OnStart()
	{
		CalculateList();
	}

	protected override int BuildHash() => System.HashCode.Combine(Width, EnableMouse, Position , Its, OrderedList , CustomFunctions.CapitalizeWords(CurrentType.ToString()), SortIndex, SortDirection );
}